<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head'); %>
</head>
<body class="container">

<header>
  <%- include('../partials/header'); %>
  <%- include('../partials/util'); %>
  <link href="https://cdn.quilljs.com/1.0.0/quill.snow.css" rel="stylesheet" />

</header>

<main>
    <h2><%= course.title %> </h2>
    <div id="quilljs-description" class="ql-container ql-snow ql-editor"></div>
    <p style="display: none" id="description-hidden"><%= course.description %></p>
    <div style="display: none">
        <div id="quill-render-hidden"></div>
    </div>
    <h3>Lectures</h3>
    <ul class="list-group">
        <% lectures.forEach(lecture => { %>
            <li class="list-group-item">
                <a href="/lecture/<%= lecture.id %>" class="nav-link"><%= lecture.title %> </a>
            </li>
        <% }) %>
    </ul>
    
    <% if (profile.admin) { %>
        <div class="card">
            <form id="course-form" class="card-body">
                <h3>Update course</h3>
                <div class="form-group">
                <label for="title">Title</label>
                <input name="title" type="text" class="form-control" id="title" value="<%= course.title %>">
                </div>
                <div class="form-group">
                <input name="description" type="hidden" class="form-control" id="description" value="<%= course.description %>">
                </div>
                <div id="editor" style="height: '25rem'"></div>
                </br>
                <button type="submit" class="btn btn-primary">Update</button>
            </form>
        </div>
        <div class="card">
            <form id="lecture-form" class="card-body">
                <h3>New lecture</h3>
                <div class="form-group">
                <label for="title">Title</label>
                <input name="title" type="text" class="form-control" id="title">
                </div>
                <button type="submit" class="btn btn-primary">Create lecture</button>
            </form>
        </div>
    <% } %>
    </div>
</main>

<footer>
  <%- include('../partials/footer'); %>
</footer>

<%- include('../partials/firebase'); %>

<script src="https://cdn.quilljs.com/1.0.0/quill.js"></script>
<script>
    const descriptionRender = document.getElementById("quilljs-description")
    const descriotionHidden = document.getElementById("description-hidden")
    var renderEditor = new Quill('#quill-render-hidden', {
        modules: { toolbar: {"toolbar": false} },
        theme: 'snow',
    });
    var descriptionContent = {};
    try {
        descriptionContent = JSON.parse(descriotionHidden.innerText);
    } catch (e) {
        console.log(e);
    }
    renderEditor.setContents(descriptionContent);
    descriptionRender.innerHTML  = renderEditor.root.innerHTML ;
</script>

<% if (profile.admin) { %>
<script>
    const descriptionInput = document.getElementById("description")
    var toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
        ['blockquote', 'code-block'],
    
        [{ 'header': 1 }, { 'header': 2 }],               // custom button values
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
        [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
        [{ 'direction': 'rtl' }],                         // text direction
    
        [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
    
        [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
        [{ 'font': [] }],
        [{ 'align': [] }],
    
        ['clean']                                         // remove formatting button
    ];
    var editor = new Quill('#editor', {
        modules: { toolbar: toolbarOptions },
        theme: 'snow',
    });
    editor.on('text-change', function(delta, oldDelta, source) {
        descriptionInput.value = JSON.stringify(editor.getContents());
    });
    editor.setContents(renderEditor.getContents());
</script>    

<script>
    const courseForm = document.getElementById("course-form")
    async function updateCourse(event) {
        event.preventDefault()
        const formData = new FormData(courseForm)
        var res = await fetch('/admin/course/<%=course.id%>/update',{
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title: formData.get('title'), description: formData.get('description')})
        })
        location.reload();
    }
    courseForm.addEventListener('submit', updateCourse);

    const lectureForm = document.getElementById("lecture-form")
    async function newLecture(event) {
        event.preventDefault()
        console.log('create lecture')
        const formData = new FormData(lectureForm)
        var res = await fetch('/admin/course/<%=course.id%>/lecture/create',{
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title: formData.get('title')})
        })
        location.reload();
    }
    lectureForm.addEventListener('submit', newLecture)
</script>
<% } %>
</body>
</html>